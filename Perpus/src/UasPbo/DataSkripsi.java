/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UasPbo;
import Coding.Skripsi;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
/**
 *
 * @author Lenovo
 */
public class DataSkripsi extends javax.swing.JFrame {
    ArrayList<Skripsi> Skripsi;
    private int id=0;
    /**
     * Creates new form DataBuku
     */
    public DataSkripsi() {
    try{
        Skripsi = new ArrayList<>();
        initComponents();
        tampil();
    } catch (Exception e) {
        Logger.getLogger(DataSkripsi.class.getName()).log(Level.SEVERE,null,e);
    }
}
    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }
    private void resetField(){
    IDSkripsi.setText(" ");
    JudulS.setText(" ");
    Tulis.setText(" ");
    Tahun.setText(" ");
    Jumlah.setText(" ");
    }
    private void tampil() {
        EntityManager entityManager = Persistence.createEntityManagerFactory("PerpusPU").createEntityManager();
        entityManager.getTransaction().begin();
        TypedQuery<Skripsi> querySelectAll = entityManager.createNamedQuery("Skripsi.findAll", Skripsi.class);
        List<Skripsi> results = querySelectAll.getResultList();
        
         DefaultTableModel model = (DefaultTableModel) DataSkripsi.getModel();
        model.setRowCount(0);
        for (Skripsi data : results) {
            Object[] baris = new Object[5];
            baris[0] = data.getIdSkripsi();
            baris[1] = data.getJudul();
            baris[2] = data.getPenulis();
            baris[3] = data.getTahunTerbit();
            baris[4] = data.getJumlahHalaman();
           
            model.addRow(baris);
        }
        entityManager.getTransaction().commit();
          entityManager.close();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IDSkripsi = new javax.swing.JTextField();
        JudulS = new javax.swing.JTextField();
        Tulis = new javax.swing.JTextField();
        Tahun = new javax.swing.JTextField();
        Jumlah = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataSkripsi = new javax.swing.JTable();
        Simpan = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        Sort = new javax.swing.JComboBox<>();
        Cari = new javax.swing.JButton();
        Ubah = new javax.swing.JButton();
        Hapus = new javax.swing.JButton();
        Cetak = new javax.swing.JButton();
        Back = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(IDSkripsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 190, 30));
        getContentPane().add(JudulS, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 190, 30));
        getContentPane().add(Tulis, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 250, 200, 30));
        getContentPane().add(Tahun, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 300, 190, 30));
        getContentPane().add(Jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 190, 30));

        DataSkripsi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Skripsi", "Judul", "Penulis", "Tahun Terbit", "Jumlah Halaman"
            }
        ));
        DataSkripsi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataSkripsiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DataSkripsi);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 360, 330));

        Simpan.setBackground(new java.awt.Color(0, 153, 102));
        Simpan.setForeground(new java.awt.Color(255, 255, 255));
        Simpan.setText("Simpan");
        Simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimpanActionPerformed(evt);
            }
        });
        getContentPane().add(Simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 440, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("CARI");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, -1, -1));
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 120, 170, 30));

        Sort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Skripsi", "Judul", "Penulis", "Tahun Terbit" }));
        getContentPane().add(Sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, -1, -1));

        Cari.setBackground(new java.awt.Color(0, 153, 102));
        Cari.setForeground(new java.awt.Color(255, 255, 255));
        Cari.setText("Cari");
        Cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariActionPerformed(evt);
            }
        });
        getContentPane().add(Cari, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, -1, -1));

        Ubah.setBackground(new java.awt.Color(0, 153, 102));
        Ubah.setForeground(new java.awt.Color(255, 255, 255));
        Ubah.setText("Ubah");
        Ubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UbahActionPerformed(evt);
            }
        });
        getContentPane().add(Ubah, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 440, -1, -1));

        Hapus.setBackground(new java.awt.Color(0, 153, 102));
        Hapus.setForeground(new java.awt.Color(255, 255, 255));
        Hapus.setText("Hapus");
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });
        getContentPane().add(Hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 440, -1, -1));

        Cetak.setBackground(new java.awt.Color(0, 153, 102));
        Cetak.setForeground(new java.awt.Color(255, 255, 255));
        Cetak.setText("Cetak");
        Cetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CetakActionPerformed(evt);
            }
        });
        getContentPane().add(Cetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 423, -1, 50));

        Back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Back.setText("Back");
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UasPbo/Travalizer - Desktop (1).png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimpanActionPerformed
    int IdSkripsi = Integer.parseInt(IDSkripsi.getText());
    String Judul =JudulS.getText().trim();
    String Penulis =Tulis.getText().trim();
     int TahunTerbit = Integer.parseInt(Tahun.getText());
     int JumlahHalaman = Integer.parseInt(Jumlah.getText());
   

    EntityManager entityManager = Persistence.createEntityManagerFactory("PerpusPU").createEntityManager();
    entityManager.getTransaction().begin();
    Skripsi b = new Skripsi();
    b.setIdSkripsi(IdSkripsi);
    b.setJudul(Judul);
    b.setPenulis(Penulis);
    b.setTahunTerbit(TahunTerbit);
    b.setJumlahHalaman(JumlahHalaman);
    entityManager.persist(b);
    entityManager.getTransaction().commit();


    IDSkripsi.setText(" ");
    JudulS.setText(" ");
    Tulis.setText(" ");
    Tahun.setText(" ");
    Jumlah.setText(" ");
    }//GEN-LAST:event_SimpanActionPerformed

    private void UbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UbahActionPerformed
    int IdSkripsi = Integer.parseInt(IDSkripsi.getText());
    String Judul =JudulS.getText().trim();
    String Penulis =Tulis.getText().trim();
     int TahunTerbit = Integer.parseInt(Tahun.getText());
     int JumlahHalaman = Integer.parseInt(Jumlah.getText());
   
     
    EntityManagerFactory emf=Persistence.createEntityManagerFactory("PerpusPU");  
    EntityManager em=emf.createEntityManager();  
    Skripsi b = new Skripsi();
    b.setIdSkripsi(IdSkripsi);
    b.setJudul(Judul);
    b.setPenulis(Penulis);
    b.setTahunTerbit(TahunTerbit);
    b.setJumlahHalaman(JumlahHalaman);
    em.getTransaction().begin();
        em.merge(b);
        em.getTransaction().commit();
    
    IDSkripsi.setText(" ");
    JudulS.setText(" ");
    Tulis.setText(" ");
    Tahun.setText(" ");
    Jumlah.setText(" ");
    }//GEN-LAST:event_UbahActionPerformed

    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
         int IdSkripsi = Integer.parseInt(IDSkripsi.getText());

    // awal persistence
        EntityManager entityManager = Persistence.createEntityManagerFactory("PerpusPU").createEntityManager();
        entityManager.getTransaction().begin();
        Skripsi b = entityManager.find(Skripsi.class, IdSkripsi);
        entityManager.remove(b);
        entityManager.getTransaction().commit();
        // akhir persistence
        
    IDSkripsi.setText(" ");
    JudulS.setText(" ");
    Tulis.setText(" ");
    Tahun.setText(" ");
    Jumlah.setText(" ");
    }//GEN-LAST:event_HapusActionPerformed

    private void CariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariActionPerformed
          try {
            String selection = (String) Sort.getSelectedItem();
            String searchTerm = Search.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT d FROM Skripsi d WHERE ";

             switch (selection.toLowerCase()) {
                case "id skripsi":
                    queryString += "CAST(d.idSkripsi AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "judul":
                    queryString += "LOWER(d.judul) LIKE LOWER(:searchTerm)";
                    break;
                case "penulis":
                    queryString += "LOWER(d.penulis) LIKE LOWER(:searchTerm)";
                    break;
                case "tahun terbit":
                    queryString += "CAST(d.tahunTerbit AS text) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("PerpusPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<Skripsi> query = em.createQuery(queryString, Skripsi.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<Skripsi> results = query.getResultList();

            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("ID Skrispi");
            dataModel.addColumn("Judul");
            dataModel.addColumn("Penulis");
            dataModel.addColumn("Tahun Terbit");
            dataModel.addColumn("Jumlah Halaman");
            // ... add other columns as needed

            // Add rows to the model
            for (Skripsi result : results) {
                Object[] rowData = {
                    result.getIdSkripsi(),
                    result.getJudul(),
                    result.getPenulis(),
                    result.getTahunTerbit(),
                    result.getJumlahHalaman(),
                // ... add other data fields as needed
                };
                dataModel.addRow(rowData);
            }

            // Set jTable1 with the created model
            DataSkripsi.setModel(dataModel);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_CariActionPerformed

    private void CetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CetakActionPerformed
        try {
            String selection = (String) Sort.getSelectedItem();
            String searchTerm = Search.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT d FROM Skripsi d WHERE ";

             switch (selection.toLowerCase()) {
                case "id skripsi":
                    queryString += "CAST(d.idSkripsi AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "judul":
                    queryString += "LOWER(d.judul) LIKE LOWER(:searchTerm)";
                    break;
                case "penulis":
                    queryString += "LOWER(d.penulis) LIKE LOWER(:searchTerm)";
                    break;
                case "tahun terbit":
                    queryString += "CAST(d.tahunTerbit AS text) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("PerpusPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<Skripsi> query = em.createQuery(queryString, Skripsi.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<Skripsi> results = query.getResultList();
             Map<String,Object> parameter = new HashMap<>();
           parameter.put("querySearch", searchTerm);
           parameter.put("searchBy", selection);
           
           String jrxmlFile = "src/UasPbo/Skripsi.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(jrxmlFile);
            JasperPrint jp = JasperFillManager.fillReport(jr, parameter, new JRBeanCollectionDataSource(results));
            JasperViewer.viewReport(jp, false);
        } catch (JRException ex) {
            Logger.getLogger(Skripsi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            Logger.getLogger(Skripsi.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_CetakActionPerformed

    private void DataSkripsiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataSkripsiMouseClicked
        int row = DataSkripsi.getSelectedRow();
       IDSkripsi.setText(DataSkripsi.getModel().getValueAt(row,0).toString());
       JudulS.setText(DataSkripsi.getModel().getValueAt(row,1).toString());
       Tulis.setText(DataSkripsi.getModel().getValueAt(row,2).toString());
       Tahun.setText(DataSkripsi.getModel().getValueAt(row,3).toString());
       Jumlah.setText(DataSkripsi.getModel().getValueAt(row,4).toString());
    }//GEN-LAST:event_DataSkripsiMouseClicked

    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
        Dashboard Back = new Dashboard();
            Back.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_BackMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataSkripsi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Back;
    private javax.swing.JButton Cari;
    private javax.swing.JButton Cetak;
    private javax.swing.JTable DataSkripsi;
    private javax.swing.JButton Hapus;
    private javax.swing.JTextField IDSkripsi;
    private javax.swing.JTextField JudulS;
    private javax.swing.JTextField Jumlah;
    private javax.swing.JTextField Search;
    private javax.swing.JButton Simpan;
    private javax.swing.JComboBox<String> Sort;
    private javax.swing.JTextField Tahun;
    private javax.swing.JTextField Tulis;
    private javax.swing.JButton Ubah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
