/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UasPbo;
import Coding.Buku;
import Coding.Peminjaman;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Root;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
/**
 *
 * @author Lenovo
 */
public class PeminjamanBuku extends javax.swing.JFrame {
    ArrayList <Peminjaman> PeminjamanBuku;
    private int id = 0;
    
    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }
    public static String date(Date date){
     SimpleDateFormat format = new SimpleDateFormat("yyyy-MMMM-dd");  
     return format.format(date);
    }   
    public PeminjamanBuku(){
    try{
        PeminjamanBuku = new ArrayList<>();
        initComponents(); 
        tampilanPinjamBuku();
        } catch (Exception e) {
        Logger.getLogger(PeminjamanBuku.class.getName()).log(Level.SEVERE,null,e);
     
    }
}
    public String dateChooser;
    
   private void tampilanPinjamBuku() {
        DefaultTableModel model = (DefaultTableModel) Peminjaman.getModel();
        model.setRowCount(0);

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("PerpusPU");
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();

        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Peminjaman> cq = cb.createQuery(Peminjaman.class);
        Root<Peminjaman> pbuk = cq.from(Peminjaman.class);
        Join<Peminjaman, Buku> bukuJoin = pbuk.join("isbn", JoinType.INNER);

        cq.multiselect(
                pbuk.get("idPengguna"),
                bukuJoin.get("isbn"),
                pbuk.get("nama"),
                pbuk.get("semester"),
                pbuk.get("jurusan"),
                pbuk.get("angkatan"),
                pbuk.get("status"),
                pbuk.get("tanggalPeminjaman"),
                pbuk.get("tanggalPengembalian"),
                pbuk.get("jumlahBuku")
        );

        CriteriaQuery<Peminjaman> select = cq.select(pbuk);
        TypedQuery<Peminjaman> q = em.createQuery(select);
        List<Peminjaman> resultList = q.getResultList();

        for (Peminjaman data : resultList) {
            Object[] baris = new Object[10];
            baris[0] = data.getIdPengguna();
            baris[1] = data.getIsbn().getIsbn();
            baris[2] = data.getNama();
            baris[3] = data.getSemester();
            baris[4] = data.getJurusan();
            baris[5] = data.getAngkatan();
            baris[6] = data.getStatus();
            baris[7] = data.getTanggalPeminjaman();
            baris[8] = data.getTanggalPengembalian();
            baris[9] = data.getJumlahBuku();

            model.addRow(baris);
        }

        Peminjaman.setModel(model);

        em.getTransaction().commit();
        em.close();
        emf.close();
    }
    private void Kosongkan_Form(){
    Pengguna.setText("");
    Isbn.setText(" ");
    nama.setText(" ");
    semester.setText(" ");
    jurusan.setText(" ");
    angkatan.setText(" ");
    status.setSelectedItem("");
    Jumlah.setText(" "); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pengguna = new javax.swing.JTextField();
        nama = new javax.swing.JTextField();
        semester = new javax.swing.JTextField();
        jurusan = new javax.swing.JTextField();
        angkatan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Peminjaman = new javax.swing.JTable();
        Simpan = new javax.swing.JButton();
        Hapus = new javax.swing.JButton();
        Cetak = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        Sort = new javax.swing.JComboBox<>();
        Cari = new javax.swing.JButton();
        Back = new javax.swing.JLabel();
        Isbn = new javax.swing.JTextField();
        status = new javax.swing.JComboBox<>();
        Jumlah = new javax.swing.JTextField();
        Pinjam = new com.toedter.calendar.JDateChooser();
        Kembali = new com.toedter.calendar.JDateChooser();
        Kategori = new javax.swing.JButton();
        Angkat = new javax.swing.JButton();
        Bulan = new javax.swing.JButton();
        Terbanyak = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(880, 680));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(Pengguna, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 160, 30));
        getContentPane().add(nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 180, 30));
        getContentPane().add(semester, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 150, 30));
        getContentPane().add(jurusan, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 140, 30));
        getContentPane().add(angkatan, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 120, 150, 30));

        Peminjaman.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Pengguna", "ISBN", "Nama", "Semester", "Jurusan", "Angkatan", "Status", "Tanggal Peminjaman", "Tanggal Pengembalian", "Jumlah Buku"
            }
        ));
        Peminjaman.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PeminjamanMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Peminjaman);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 820, 190));

        Simpan.setBackground(new java.awt.Color(0, 153, 102));
        Simpan.setForeground(new java.awt.Color(255, 255, 255));
        Simpan.setText("Simpan");
        Simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimpanActionPerformed(evt);
            }
        });
        getContentPane().add(Simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 370, -1, 30));

        Hapus.setBackground(new java.awt.Color(0, 153, 102));
        Hapus.setForeground(new java.awt.Color(255, 255, 255));
        Hapus.setText("Hapus");
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });
        getContentPane().add(Hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 370, -1, 30));

        Cetak.setBackground(new java.awt.Color(0, 153, 102));
        Cetak.setForeground(new java.awt.Color(255, 255, 255));
        Cetak.setText("Cetak");
        Cetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CetakActionPerformed(evt);
            }
        });
        getContentPane().add(Cetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 360, 80, 40));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CARI");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, 20));
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, 160, -1));

        Sort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Pengguna", "Nama", "Semester", "Jurusan", "Angkatan", "Status", "Jumlah Buku", " ", " ", " " }));
        getContentPane().add(Sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 120, -1));

        Cari.setBackground(new java.awt.Color(0, 153, 102));
        Cari.setForeground(new java.awt.Color(255, 255, 255));
        Cari.setText("Cari");
        Cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariActionPerformed(evt);
            }
        });
        getContentPane().add(Cari, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 50, -1));

        Back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Back.setText("Back");
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, -1, -1));
        getContentPane().add(Isbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 160, 30));

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dipinjam", "Kembali", " " }));
        getContentPane().add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, -1, 30));
        getContentPane().add(Jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 310, 120, 30));
        getContentPane().add(Pinjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 210, 160, 30));
        getContentPane().add(Kembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 260, 150, 30));

        Kategori.setBackground(new java.awt.Color(0, 153, 102));
        Kategori.setForeground(new java.awt.Color(255, 255, 255));
        Kategori.setText("Kategori");
        Kategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KategoriActionPerformed(evt);
            }
        });
        getContentPane().add(Kategori, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 420, -1, -1));

        Angkat.setBackground(new java.awt.Color(0, 153, 102));
        Angkat.setForeground(new java.awt.Color(255, 255, 255));
        Angkat.setText("Angkatan");
        getContentPane().add(Angkat, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, -1, -1));

        Bulan.setBackground(new java.awt.Color(0, 153, 102));
        Bulan.setForeground(new java.awt.Color(255, 255, 255));
        Bulan.setText("Bulan");
        Bulan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BulanMouseClicked(evt);
            }
        });
        getContentPane().add(Bulan, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 420, -1, -1));

        Terbanyak.setBackground(new java.awt.Color(0, 153, 102));
        Terbanyak.setForeground(new java.awt.Color(255, 255, 255));
        Terbanyak.setText("Terbanyak");
        getContentPane().add(Terbanyak, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 420, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UasPbo/Travalizer - Desktop (13).png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 680));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimpanActionPerformed
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    int IdPengguna = Integer.parseInt(Pengguna.getText());
    String ISBN = Isbn.getText().trim();
    String Nama = nama.getText().trim();
    int Semester = Integer.parseInt(semester.getText());
    String Jurusan = jurusan.getText().trim();
    int Angkatan = Integer.parseInt(angkatan.getText());  
    String Status = (String) status.getSelectedItem();
    String TanggalPeminjaman = format.format(Pinjam.getDate());
    String TanggalPengembalian = format.format(Kembali.getDate());
    int JumlahBuku = Integer.parseInt(Jumlah.getText());   
    
    EntityManager entityManager = Persistence.createEntityManagerFactory("PerpusPU").createEntityManager();
    entityManager.getTransaction().begin();
    
    String isbn = Isbn.getText().trim();
    Buku abc = entityManager.find(Buku.class, isbn);
        Peminjaman p = new Peminjaman();
        p.setIdPengguna(IdPengguna);
        p.setIsbn(abc);
        p.setNama(Nama);
        p.setSemester(Semester);
        p.setJurusan(Jurusan);
        p.setAngkatan(Angkatan);
        p.setStatus(Status);
        p.setJumlahBuku(JumlahBuku);

        // Set tanggal peminjaman buku
        try {
            Date datePeminjaman = format.parse(TanggalPeminjaman);
            Date dateKembali = format.parse(TanggalPengembalian);
            p.setTanggalPeminjaman(datePeminjaman);
            p.setTanggalPengembalian(dateKembali);

        } catch (ParseException e) {
            // Tangani kesalahan jika terjadi kesalahan parsing tanggal
            e.printStackTrace(); // Gantilah ini dengan penanganan yang sesuai
        }
        
        entityManager.persist(p);
        
        entityManager.getTransaction().commit();
        
    Pengguna.setText("");
    Isbn.setText(" ");
    nama.setText(" ");
    semester.setText(" ");
    jurusan.setText(" ");
    angkatan.setText(" ");
    status.setSelectedItem("");
    Jumlah.setText(" "); 
    Pinjam.setDate(null);
    Kembali.setDate(null);
    
    DefaultTableModel model = (DefaultTableModel) Peminjaman.getModel();
    model.setRowCount(0);
    tampilanPinjamBuku();
    
    }//GEN-LAST:event_SimpanActionPerformed

    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    int IdPengguna = Integer.parseInt(Pengguna.getText());
    String ISBN = Isbn.getText().trim();
    String Nama = nama.getText().trim();
    int Semester = Integer.parseInt(semester.getText());
    String Jurusan = jurusan.getText().trim();
    int Angkatan = Integer.parseInt(angkatan.getText());  
    String Status = (String) status.getSelectedItem();
    int JumlahBuku = Integer.parseInt(Jumlah.getText());   
    
    EntityManager entityManager = Persistence.createEntityManagerFactory("PerpusPU").createEntityManager();
    entityManager.getTransaction().begin();
    TypedQuery <Peminjaman> queryfindByIdPengguna = entityManager.createNamedQuery("Peminjaman.findByIdPengguna", Peminjaman.class);
    TypedQuery <Peminjaman> setParameter = queryfindByIdPengguna.setParameter("idPengguna", IdPengguna);
    Peminjaman firstEntity = setParameter.getSingleResult();
    if (firstEntity != null) {
            entityManager.remove(firstEntity);

            // Commit transaksi
            entityManager.getTransaction().commit();
            this.peringatan("Delete berhasil");
        } else {
            this.peringatan("Delete gagal");
        }

        this.tampilanPinjamBuku();
    }//GEN-LAST:event_HapusActionPerformed

    private void CariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariActionPerformed
       try {
            String selection = (String) Sort.getSelectedItem();
            String searchTerm = Search.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT d FROM Peminjaman d WHERE ";

             switch (selection.toLowerCase()) {
                case "id pengguna":
                    queryString += "CAST(d.idPengguna AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "nama":
                    queryString += "LOWER(d.nama) LIKE LOWER(:searchTerm)";
                    break;
                case "semester":
                    queryString += "CAST(d.semester AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "jurusan":
                    queryString += "LOWER(d.jurusan) LIKE LOWER(:searchTerm)";
                    break;
                case "angkatan":
                   queryString += "CAST(d.angkatan AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "status":
                    queryString += "LOWER(d.status) LIKE LOWER(:searchTerm)";
                    break;
                case "jumlah buku":
                    queryString += "CAST(d.jumlahBuku AS text) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("PerpusPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<Peminjaman> query = em.createQuery(queryString, Peminjaman.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<Peminjaman> results = query.getResultList();

            DefaultTableModel dataModel = new DefaultTableModel();

            // Add columns to the model
            dataModel.addColumn("ID Pengguna");
            dataModel.addColumn("ISBN");
            dataModel.addColumn("Nama");
            dataModel.addColumn("Semester");
            dataModel.addColumn("Jurusan");
            dataModel.addColumn("Angkatan");
            dataModel.addColumn("Status");
            dataModel.addColumn("Tanggal Peminjaman");
            dataModel.addColumn("Tanggal Pengembalian");
            dataModel.addColumn("Jumlah Buku");
            // ... add other columns as needed

            // Add rows to the model
            for (Peminjaman result : results) {
                Object[] rowData = {
                    result.getIdPengguna(),
                    result.getIsbn(),
                    result.getNama(),
                    result.getSemester(),
                    result.getJurusan(),
                    result.getAngkatan(),
                    result.getStatus(),
                    result.getTanggalPeminjaman(),
                    result.getTanggalPengembalian(),
                    result.getJumlahBuku(),
                // ... add other data fields as needed
                };
                dataModel.addRow(rowData);
            }

            // Set jTable1 with the created model
            Peminjaman.setModel(dataModel);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_CariActionPerformed

    private void CetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CetakActionPerformed
          try {
            String selection = (String) Sort.getSelectedItem();
            String searchTerm = Search.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT d FROM Peminjaman d WHERE ";

             switch (selection.toLowerCase()) {
                case "id pengguna":
                    queryString += "CAST(d.idPengguna AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "nama":
                    queryString += "LOWER(d.nama) LIKE LOWER(:searchTerm)";
                    break;
                case "semester":
                    queryString += "CAST(d.semester AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "jurusan":
                    queryString += "LOWER(d.jurusan) LIKE LOWER(:searchTerm)";
                    break;
                case "angkatan":
                   queryString += "CAST(d.angkatan AS text) LIKE LOWER(:searchTerm)";
                    break;
                case "status":
                    queryString += "LOWER(d.status) LIKE LOWER(:searchTerm)";
                    break;
                case "jumlah buku":
                    queryString += "CAST(d.jumlahBuku AS text) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }
            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("PerpusPU");
            EntityManager em = emf.createEntityManager();

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

            TypedQuery<Peminjaman> query = em.createQuery(queryString, Peminjaman.class);
            query.setParameter("searchTerm", "%" + searchTerm + "%");

            List<Peminjaman> results = query.getResultList();
             Map<String,Object> parameter = new HashMap<>();
           parameter.put("querySearch", searchTerm);
           parameter.put("searchBy", selection);
           
           String jrxmlFile = "src/UasPbo/Peminjaman.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(jrxmlFile);
            JasperPrint jp = JasperFillManager.fillReport(jr, parameter, new JRBeanCollectionDataSource(results));
            JasperViewer.viewReport(jp, false);
        } catch (JRException ex) {
            Logger.getLogger(Buku.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            Logger.getLogger(Buku.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_CetakActionPerformed

    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
         Dashboard Back = new Dashboard();
            Back.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_BackMouseClicked

    private void PeminjamanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PeminjamanMouseClicked
         try {
            int row = Peminjaman.getSelectedRow();
            SimpleDateFormat format = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
            Pengguna.setText(Peminjaman.getModel().getValueAt(row,0).toString());
            Isbn.setText(Peminjaman.getModel().getValueAt(row,1).toString());
            nama.setText(Peminjaman.getModel().getValueAt(row,2).toString());
            semester.setText(Peminjaman.getModel().getValueAt(row,3).toString());
            jurusan.setText(Peminjaman.getModel().getValueAt(row,4).toString());
            angkatan.setText(Peminjaman.getModel().getValueAt(row,5).toString());
            status.setSelectedItem(Peminjaman.getModel().getValueAt(row,6).toString());
            Pinjam.setDate(format.parse(Peminjaman.getModel().getValueAt(row,7).toString()));
            Kembali.setDate(format.parse(Peminjaman.getModel().getValueAt(row,8).toString()));
            Jumlah.setText(Peminjaman.getModel().getValueAt(row,9).toString());
        } catch (ParseException ex) {
            Logger.getLogger(PeminjamanBuku.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PeminjamanMouseClicked

    private void KategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KategoriActionPerformed
        //jumlah banyak kategori dipinjam                                                          
        try {
            String selection = (String) Sort.getSelectedItem();
            String reportPath = "src/UasPbo/Kategori.jrxml";
            String searchTerm = Search.getText().trim();

            if (selection == null || selection.isEmpty()) {
                throw new IllegalArgumentException("-");
            }

            EntityManagerFactory emf = Persistence.createEntityManagerFactory("PerpusPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<Object[]> cq = cb.createQuery(Object[].class);
            Root<Peminjaman> peminjamanRoot = cq.from(Peminjaman.class);
            Join<Peminjaman, Buku> bukuJoin = peminjamanRoot.join("isbn", JoinType.INNER);
            Join<Buku, Subjudul> kategoriJoin = bukuJoin.join("Subjudul", JoinType.INNER);

            cq.multiselect(
                    kategoriJoin.get("nama"), 
                    cb.count(peminjamanRoot.get("idPeminjaman")).alias("jumlah_peminjaman")
            );

            cq.groupBy(kategoriJoin.get("nama")); 
            cq.orderBy(cb.desc(cb.count(peminjamanRoot.get("idPeminjaman"))));

            TypedQuery<Object[]> query = em.createQuery(cq);
            List<Object[]> results = query.getResultList();
            em.getTransaction().commit();

            em.close();
            emf.close();

            // Mapping hasil query ke dalam parameter JasperReport
            List<Map<String, Object>> mappedResults = new ArrayList<>();
            for (Object[] result : results) {
                Map<String, Object> map = new HashMap<>();
                String nama = (String) result[0];
                Long jumlahPeminjaman = (Long) result[1];

                map.put("nama", nama); // Sesuaikan dengan atribut yang sesuai pada kelas Kategori_1
                map.put("jumlah_peminjaman", jumlahPeminjaman);
                mappedResults.add(map);
            }


            // Creating a JasperReports data source from the mapped results
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(mappedResults);

            // Loading the report design file (*.jrxml)
            JasperReport jasperReport = JasperCompileManager.compileReport(reportPath);
            JasperPrint print = JasperFillManager.fillReport(jasperReport, null, dataSource);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(PeminjamanBuku.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_KategoriActionPerformed

    private void BulanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BulanMouseClicked
       LaporanBulanan Bulan = new LaporanBulanan();
            Bulan.setVisible(true);
            this.dispose();                          
    }//GEN-LAST:event_BulanMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Peminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Peminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Peminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Peminjaman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeminjamanBuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Angkat;
    private javax.swing.JLabel Back;
    private javax.swing.JButton Bulan;
    private javax.swing.JButton Cari;
    private javax.swing.JButton Cetak;
    private javax.swing.JButton Hapus;
    private javax.swing.JTextField Isbn;
    private javax.swing.JTextField Jumlah;
    private javax.swing.JButton Kategori;
    private com.toedter.calendar.JDateChooser Kembali;
    private javax.swing.JTable Peminjaman;
    private javax.swing.JTextField Pengguna;
    private com.toedter.calendar.JDateChooser Pinjam;
    private javax.swing.JTextField Search;
    private javax.swing.JButton Simpan;
    private javax.swing.JComboBox<String> Sort;
    private javax.swing.JButton Terbanyak;
    private javax.swing.JTextField angkatan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jurusan;
    private javax.swing.JTextField nama;
    private javax.swing.JTextField semester;
    private javax.swing.JComboBox<String> status;
    // End of variables declaration//GEN-END:variables
}
